type User @model {
	id: ID!
	name: String!
	email: AWSEmail!
	rawImage: AWSURL
	alignedImage: AWSURL
	encoding: AWSURL

	matches: [MatchUser] @connection(keyName: "byUser", fields: ["id"])
	messages: [Message] @connection(keyName: "bySender", fields: ["id"])
}



type MatchUser @model(queries: null)
@key(name: "byUser", fields: ["sourceUserID", "targetUserID"])
@key(name: "byMatch", fields: ["matchID"]) { 

	"""
	Join model to link User and Match
	Unmatched/Reported tbd
	"""
	id: ID!
	matchStatus: UserMatchStatus!

	matchID: ID!
	match: Match! @connection(fields: ["matchID"])

	sourceUserID: ID!
	sourceUser: User! @connection(fields: ["sourceUserID"])

	targetUserID: ID!
	targetUser: User! @connection(fields: ["targetUserID"])

}

type Match @model {
	id: ID!
	matched: MatchStatus!
	encoding: AWSURL
	mixedImage: AWSURL

	users: [MatchUser]! @connection(keyName: "byMatch", fields: ["id"])
	messages: [Message] @connection(keyName: "byMatch", fields: ["id"])
}


type Message @model
@key(name: "byMatch", fields: ["matchID"])
@key(name: "bySender", fields: ["senderID"]) 
{
	id: ID!
	content: String!
	
	senderID: ID!
	sender: User! @connection(fields: ["senderID"])

	matchID: ID!
	match: Match! @connection(fields: ["matchID"])
}

enum MatchStatus {
	Unresolved
	Matched 
	Rejected
	Unmatched
}

enum UserMatchStatus {
	NotSeen
	Liked 
	Disliked
}